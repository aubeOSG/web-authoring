(()=>{const e={init:!1,finished:!1,_time:{start:void 0,end:void 0,convert:e=>{function r(e,r){let t=new String(e);const s=t.length;if(s>r)return t.substr(0,r);for(let e=s;e<r;e++)t="0"+t;return t}let t=e%1e3,s=(e-t)/1e3%60,o=(e-t-1e3*s)/6e4%60,i=(e-t-1e3*s-6e4*o)/36e5;1e4==i&&(i=9999,o=(e-36e5*i)/6e4,100==o&&(o=99),o=Math.floor(o),s=(e-36e5*i-6e4*o)/1e3,100==s&&(s=99),s=Math.floor(s),t=e-36e5*i-6e4*o-1e3*s);let a=r(i,4)+":"+r(o,2)+":"+r(s,2);return i>9999&&(a="9999:99:99"),a}},STATUSES:{update:{true:"true",false:"false"},lesson:{success:"passed",failed:"failed",done:"completed",active:"incomplete",viewed:"browsed",unseen:"not attempted"},exit:{timeout:"time-out",save:"suspend",logout:"logout"}},isAvailable:()=>e.init&&!e.finished&&e.API?{error:!1,API:e.API}:{error:!0,message:"Service is unavailable"},getError:r=>{r=null==r||r;const t=e.isAvailable();if(t.error)return t;const s=t.API.LMSGetLastError(),o={id:s,message:t.API.LMSGetErrorString(s),stack:t.API.LMSGetDiagnostic(s)};return r&&console.error(`Error:\n${JSON.stringify(o,null,2)}`),{error:!1,data:o}},_findAPI:e=>{let r=0;if(e.API)return{error:!1,API:e.API};if(e.parent===e)return{error:!0,message:"Error: unable to find API - top level reached"};for(;null==e.API&&null!=e.parent&&r<7;)r++,e=e.parent;return r>=7?{error:!0,message:"Error: unable to find API - nested to deep"}:{error:!1,API:e.API}},start:()=>{const r=e._findAPI(window);if(r.error)return r;e.API=r.API,e._time.start=new Date,e.init=!0;return e.API.LMSInitialize()===e.STATUSES.update.false?{error:!0,message:"SCORM service failed to initialize",data:e.getError()}:{error:!1}},save:()=>{const r=e.isAvailable();if(r.error)return r;return r.API.LMSCommit()===e.STATUSES.update.false?{error:!0,message:"SCORM service failed to save",data:e.getError()}:{error:!1}},stop:()=>{const r=e.isAvailable();if(r.error)return r;const t=e.save();if(t.error)return t;return r.API.LMSFinish()===e.STATUSES.update.false?{error:!0,message:"SCORM service failed to save",data:e.getError()}:(e.finished=!0,{error:!1})},setValue:(r,t)=>{const s=e.isAvailable();if(s.error)return s;return s.API.LMSSetValue(r,t)===e.STATUSES.update.false?{error:!0,message:`SCORM service failed to set ${r} to ${t}`,data:e.getError(!0)}:{error:!1}},getValue:r=>{const t=e.isAvailable();if(t.error)return t;return t.API.LMSGetValue(r)===e.STATUSES.update.false?{error:!0,message:`SCORM service failed to get ${r}`,data:e.getError(!0)}:{error:!1}},updateStatus:r=>{const t=e.isAvailable();if(t.error)return t;if(s=e.STATUSES.lesson,o=r,!Object.prototype.hasOwnProperty.call(s,o)){const t=`Invalid lesson status: ${r}. Must be one of: ${Object.keys(e.STATUSES.lesson).join(", ")}`;return console.error(t),{error:!0,message:t}}var s,o;const i=e.STATUSES.lesson[r],a=e.setValue("cmi.core.lesson_status",i);return a.error?a:{error:!1}},exit:()=>{const r=e.isAvailable();if(r.error)return r;if(e._time.end=new Date,!e._time.start)return{error:!0,message:"Service was never started"};const t=e._time.end.getTime()-e._time.start.getTime(),s=e.setValue("cmi.core.session_time",e._time.convert(t));if(s.error)return s;const o=e.setValue("cmi.core.exit",e.STATUSES.exit.save);return o.error?o:e.stop()}};window.__SCROWL_RUNTIME=e})();
//# sourceMappingURL=scrowl.runtime.js.map
