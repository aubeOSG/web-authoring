!function(e,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var t=n();for(var r in t)("object"==typeof exports?exports:e)[r]=t[r]}}(self,(()=>(()=>{"use strict";var __webpack_modules__={166:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n;// CONCATENATED MODULE: ./src/runtime.ts\n// const hasProp = (obj: {}, prop: string) => {\n//   return Object.prototype.hasOwnProperty.call(obj, prop);\n// };\nconst service = {\n    init: false,\n    finished: false,\n    _time: {\n        startTime: undefined,\n        getSessionTime: () => {\n            let sessionTime;\n            if (service._time.startTime) {\n                sessionTime = new Date().getTime() - service._time.startTime.getTime();\n            }\n            return service._time.convert(sessionTime);\n        },\n        end: undefined,\n        convert: (total) => {\n            function ZeroPad(val, pad) {\n                let res = new String(val);\n                const len = res.length;\n                if (len > pad) {\n                    return res.substr(0, pad);\n                }\n                for (let i = len; i < pad; i++) {\n                    res = '0' + res;\n                }\n                return res;\n            }\n            let totalMs = total % 1000;\n            let totalS = ((total - totalMs) / 1000) % 60;\n            let totalM = ((total - totalMs - totalS * 1000) / 60000) % 60;\n            let totalH = (total - totalMs - totalS * 1000 - totalM * 60000) / 3600000;\n            if (totalH == 10000) {\n                totalH = 9999;\n                totalM = (total - totalH * 3600000) / 60000;\n                if (totalM == 100) {\n                    totalM = 99;\n                }\n                totalM = Math.floor(totalM);\n                totalS = (total - totalH * 3600000 - totalM * 60000) / 1000;\n                if (totalS == 100) {\n                    totalS = 99;\n                }\n                totalS = Math.floor(totalS);\n                totalMs = total - totalH * 3600000 - totalM * 60000 - totalS * 1000;\n            }\n            let timespan = ZeroPad(totalH, 4) +\n                ':' +\n                ZeroPad(totalM, 2) +\n                ':' +\n                ZeroPad(totalS, 2);\n            if (totalH > 9999) {\n                timespan = '9999:99:99';\n            }\n            return timespan;\n        },\n    },\n    nFindAPITries: 0,\n    // @ts-ignore\n    API: null,\n    maxTries: 500,\n    //@ts-ignore\n    scanForAPI: (win) => {\n        while (win.API_1484_11 == null && win.parent != null && win.parent != win) {\n            service.nFindAPITries++;\n            if (service.nFindAPITries > service.maxTries) {\n                return null;\n            }\n            win = win.parent;\n        }\n        return win.API_1484_11;\n    },\n    getAPI: (win) => {\n        if (win.parent != null && win.parent != win) {\n            //@ts-ignore\n            service.API = service.scanForAPI(win.parent);\n        }\n        if (service.API == null && win.opener != null) {\n            // @ts-ignore\n            service.API = service.scanForAPI(win.opener);\n        }\n    },\n    getError: (printError) => {\n        printError =\n            printError === undefined || printError === null ? true : printError;\n        const res = service.isAvailable();\n        if (res.error) {\n            return res;\n        }\n        const errorId = res.API.GetLastError();\n        const errorMsg = res.API.GetErrorString(errorId);\n        const errorStack = res.API.GetDiagnostic(errorId);\n        const apiError = {\n            id: errorId,\n            message: errorMsg,\n            stack: errorStack,\n        };\n        if (printError) {\n            console.error(`Error:\\n${JSON.stringify(apiError, null, 2)}`);\n        }\n        return {\n            error: false,\n            data: apiError,\n        };\n    },\n    commit: () => {\n        if (!service.API) {\n            throw 'MISSING_SCORM_API';\n        }\n        service.setValue('cmi.session_time', service._time.getSessionTime());\n        service.API.Commit('');\n        console.log('API.Commit()');\n        if (service.API.Commit('') === 'false') {\n            throw 'ERROR_COMMIT_SCORM_API';\n        }\n    },\n    exit: () => {\n        service.commit();\n    },\n    initialize: () => {\n        if (!service.API) {\n            throw 'MISSING_SCORM_API';\n        }\n        console.log('API.Initialize()');\n        if (service.API.Initialize('') === 'false') {\n            throw 'ERROR_INIT_SCORM_API';\n        }\n    },\n    // { m: 1, l: 1, s?: 3 }\n    updateLocation: (location, progressPercentage) => {\n        service.setValue('cmi.location', JSON.stringify({ v1: 1, ...location.lesson }));\n        // Update progress\n        progressPercentage = progressPercentage || 0;\n        service.setValue('cmi.progress_measure', progressPercentage);\n        service.commit();\n    },\n    getLocation: () => {\n        // {m:1, l:1, s?:3} || {} || null\n        try {\n            return JSON.parse(service.getValue('cmi.location'));\n        }\n        catch (e) {\n            return {};\n        }\n    },\n    start: () => {\n        service._time.startTime = new Date();\n        service.getAPI(window);\n        if (!service.API) {\n            throw 'MISSING_SCORM_API';\n        }\n        service.init = true;\n        service.initialize();\n        const completionStatus = service.getValue('cmi.completion_status');\n        if (completionStatus === 'unknown') {\n            service.setValue('cmi.completion_status', 'incomplete');\n            service.setValue('cmi.success_status', 'unknown');\n            service.setValue('cmi.suspend_data', '{}');\n        }\n        else {\n            service.setValue('cmi.score.scaled', service.getValue('cmi.score.scaled'));\n            service.setValue('cmi.score.raw', service.getValue('cmi.score.raw'));\n            service.setValue('cmi.success_status', service.getValue('cmi.success_status'));\n            service.setValue('cmi.progress_measure', service.getValue('cmi.progress_measure'));\n            service.setValue('cmi.completion_status', service.getValue('cmi.completion_status'));\n        }\n        // until we have things hooked up to exit buttons/nav, set exit to 'suspend' as part of start() so that status persists whether the user finishes or exits\n        service.setValue('cmi.exit', 'suspend');\n        service.commit();\n        return {\n            error: false,\n        };\n    },\n    finish: () => {\n        service.setValue('cmi.score.min', 0);\n        service.setValue('cmi.score.max', 100);\n        service.setValue('cmi.score.scaled', 1);\n        service.setValue('cmi.score.raw', 100);\n        service.setValue('cmi.success_status', 'passed');\n        service.setValue('cmi.progress_measure', 1);\n        service.setValue('cmi.completion_status', 'completed');\n        console.log('SERVICE');\n        console.log(service);\n        service.commit();\n        service.API?.Terminate('');\n    },\n    setValue: (elem, val) => {\n        if (!service.API) {\n            throw 'MISSING_SCORM_API';\n        }\n        console.log('API.SetValue', elem, val);\n        service.API.SetValue(elem, val);\n        // if (service.API.SetValue(elem, val) === 'false') {\n        //   throw {\n        //     message: `SCORM service failed to set ${elem} to ${val}`,\n        //     data: service.getError(true),\n        //   };\n        // }\n        return {\n            error: false,\n        };\n    },\n    getValue: (elem) => {\n        if (!service.API) {\n            throw 'MISSING_SCORM_API';\n        }\n        const getRes = service.API.GetValue(elem);\n        if (getRes === 'false') {\n            throw {\n                message: `SCORM service failed to get ${elem}`,\n                data: service.getError(true),\n            };\n        }\n        console.log('API.GetValue', elem, getRes);\n        return getRes;\n    },\n};\n/* harmony default export */ const runtime = ({\n    service,\n});\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n;// CONCATENATED MODULE: ./web/index.ts\n\nwindow.Scrowl = window.Scrowl || {};\nwindow.Scrowl.runtime = service;\n\n\n//# sourceURL=webpack://@scrowl/runtime/./web/index.ts_+_2_modules?")}},__webpack_require__={r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},__webpack_exports__={};return __webpack_modules__[166](0,__webpack_exports__,__webpack_require__),__webpack_exports__})()));