{"version":3,"file":"scrowl.template-inline-text.481.component.js","mappings":"6LAIA,MAAMA,EAAa,EAAGC,KAAIC,SAAQC,cAAaC,MAC7C,MAAMC,EAASC,OAAe,OAC9B,IAAIC,EAAU,uBACd,MAAMC,EAAeL,EAAWC,EAAMI,aAAe,KAC/CC,EAAY,GAAGR,gBACfS,EAAOR,EAAOS,QAAQD,KAAKE,MAC3BC,EAAaX,EAAOS,QAAQD,KAAKI,MACjCC,EAAgC,SAAjBP,GAA2B,YAC1CQ,EAAKd,EAAOS,QAAQM,QAAQN,QAAQK,GAAGJ,MAEvCM,EAA6B,UADjBhB,EAAOS,QAAQQ,QAAQR,QAAQS,UAAUR,MACd,QAAU,OACjDS,EAAoBnB,EAAOoB,eAAeD,mBAAmBT,MAE7DW,EAAsBrB,EAAOoB,eAAeE,oBAAoBZ,MAChEa,EAAkBvB,EAAOS,QAAQQ,QAAQR,QAAQe,aAAad,MAC9De,GAAkB,IAAAC,QAAOH,GACzBI,GAAgB,IAAAD,QAAO,IACtBE,EAAmBC,IAAwB,IAAAC,UAAS,CACzDC,MAAOR,EAAkB,KAAO,UAE3BS,EAAYC,IAAiB,IAAAH,UAAS7B,GACvCiC,EAAS/B,EAAOgC,KAAKC,WAAWF,OAChCG,EAAmBlC,EAAOgC,KAAKC,WAAWC,iBAE1CC,EAAe,CACnBC,OAAQ,CACN,CACEC,KAAM,SACNC,KAAM,CACJjC,KAAMG,EACN+B,MAAO,IAGX,CACEF,KAAM,YACNC,KAAM,CACJjC,KAAMA,OAMPiC,EAAME,IAAW,IAAAb,UAASQ,GAY7Bf,IACFlB,GAAW,kBAuCb,OAZA,IAAAuC,YAAU,KACRnB,EAAgBoB,QAAUtB,EAC1BM,EAAqB,IAChBD,EACHG,MAAOR,EAAkB,GAAGI,EAAckB,WAAa,QACvD,GACD,CAACtB,KAEJ,IAAAqB,YAAU,KACRX,EAAchC,EAAS,GACtB,CAACA,IAGF,kBAACE,EAAOgC,KAAKW,SAAQ,CACnB/C,GAAI,SAASQ,IACbwC,UAAW1C,EACX2C,WAxCyBC,IAC3BtB,EAAckB,QAAUI,EAAGC,SAEvBzB,EAAgBoB,SAClBhB,EAAqB,IAChBD,EACHG,MAAO,GAAGkB,EAAGC,a,EAmCfC,MA9BmB,KACrBxB,EAAckB,QAAU,IAEnBpB,EAAgBoB,SAIrBhB,EAAqB,IAChBD,EACHG,MAAO,QACP,EAqBAqB,WAAUjC,EACVE,oBAAqBA,KACjBnB,GAEJ,yBAAKH,GAAIQ,EAAWwC,UAAU,mBAC5B,yBAAKA,UAAW,aAAa/B,KAC1BF,GAAM,yBAAKiC,UAAU,sBAEtB,yBAAKA,UAAW,2BACd,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,eAAeM,MAAOzB,KAEvC,yBAAKmB,UAAW,yBAAyBlC,KACvC,4BAAQd,GAAG,kBAAkBuD,QAtEpB,KACjBtB,GACFC,GAAc,GACdsB,QAAQC,IAAI,+BAEZvB,GAAc,GACdsB,QAAQC,IAAI,4B,GAgEkD,oBAIpD,yBAAKT,UAAU,eACZf,EACC,kBAACE,EAAM,CAACO,KAAMA,EAAME,QAASA,IAE7B,kBAACN,EAAgB,CAACI,KAAMA,UASzC,C","sources":["webpack://@scrowl/template-inline-text/./src/inline-text.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './_index.scss';\nimport { InlineTextProps } from './inline-text.types';\n\nconst InlineText = ({ id, schema, editMode, ...props }: InlineTextProps) => {\n  const Scrowl = window['Scrowl'];\n  let classes = 'template-inline-text';\n  const focusElement = editMode ? props.focusElement : null;\n  const contentId = `${id}-inline-text`;\n  const text = schema.content.text.value;\n  const headerText = schema.content.text.label;\n  const textFocusCss = focusElement === 'text' && 'has-focus';\n  const bg = schema.content.bgImage.content.bg.value;\n  const alignment = schema.content.options.content.alignment.value;\n  const alignmentCss = alignment === 'right' ? 'right' : 'left';\n  const disableAnimations = schema.controlOptions.disableAnimations?.value;\n  //@ts-ignore\n  const stopUserAdvancement = schema.controlOptions.stopUserAdvacement?.value;\n  const showProgressBar = schema.content.options.content.showProgress.value;\n  const showProgressRef = useRef(showProgressBar);\n  const slideProgress = useRef(0);\n  const [progressBarStyles, setProgressBarStyles] = useState({\n    width: showProgressBar ? '0%' : '100%',\n  });\n  const [isEditMode, setIsEditMode] = useState(editMode);\n  const Editor = Scrowl.core.components.Editor;\n  const EditorTextParser = Scrowl.core.components.EditorTextParser;\n\n  const INITIAL_DATA = {\n    blocks: [\n      {\n        type: 'header',\n        data: {\n          text: headerText,\n          level: 1,\n        },\n      },\n      {\n        type: 'paragraph',\n        data: {\n          text: text,\n        },\n      },\n    ],\n  };\n\n  const [data, setData] = useState(INITIAL_DATA);\n\n  const toggleEditMode = () => {\n    if (isEditMode) {\n      setIsEditMode(false);\n      console.log('Edit mode is now disabled');\n    } else {\n      setIsEditMode(true);\n      console.log('Edit mode is now enabled');\n    }\n  };\n\n  if (showProgressBar) {\n    classes += ' show-progress';\n  }\n\n  const handleSlideProgress = (ev) => {\n    slideProgress.current = ev.progress;\n\n    if (showProgressRef.current) {\n      setProgressBarStyles({\n        ...progressBarStyles,\n        width: `${ev.progress}%`,\n      });\n    }\n  };\n\n  const handleSlideEnd = () => {\n    slideProgress.current = 100;\n\n    if (!showProgressRef.current) {\n      return;\n    }\n\n    setProgressBarStyles({\n      ...progressBarStyles,\n      width: `100%`,\n    });\n  };\n\n  useEffect(() => {\n    showProgressRef.current = showProgressBar;\n    setProgressBarStyles({\n      ...progressBarStyles,\n      width: showProgressBar ? `${slideProgress.current}%` : `100%`,\n    });\n  }, [showProgressBar]);\n\n  useEffect(() => {\n    setIsEditMode(editMode);\n  }, [editMode]);\n\n  return (\n    <Scrowl.core.Template\n      id={`slide-${contentId}`}\n      className={classes}\n      onProgress={handleSlideProgress}\n      onEnd={handleSlideEnd}\n      notScene={disableAnimations ? true : false}\n      stopUserAdvancement={stopUserAdvancement}\n      {...props}\n    >\n      <div id={contentId} className=\"owlui-container\">\n        <div className={`owlui-row ${alignmentCss}`}>\n          {bg && <div className=\"owlui-col overlay\" />}\n\n          <div className={`owlui-col text__wrapper`}>\n            <div className=\"text__container\">\n              <div className=\"progress-indictor\">\n                <div className=\"progress-bar\" style={progressBarStyles}></div>\n              </div>\n              <div className={`text__value can-focus ${textFocusCss}`}>\n                <button id=\"toggle-edit-btn\" onClick={toggleEditMode}>\n                  Toggle Edit Mode\n                </button>\n\n                <div className=\"app-content\">\n                  {isEditMode ? (\n                    <Editor data={data} setData={setData} />\n                  ) : (\n                    <EditorTextParser data={data} />\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Scrowl.core.Template>\n  );\n};\n\nexport { InlineText as default };\n"],"names":["InlineText","id","schema","editMode","props","Scrowl","window","classes","focusElement","contentId","text","content","value","headerText","label","textFocusCss","bg","bgImage","alignmentCss","options","alignment","disableAnimations","controlOptions","stopUserAdvancement","stopUserAdvacement","showProgressBar","showProgress","showProgressRef","useRef","slideProgress","progressBarStyles","setProgressBarStyles","useState","width","isEditMode","setIsEditMode","Editor","core","components","EditorTextParser","INITIAL_DATA","blocks","type","data","level","setData","useEffect","current","Template","className","onProgress","ev","progress","onEnd","notScene","style","onClick","console","log"],"sourceRoot":""}