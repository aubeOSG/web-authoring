{"version":3,"file":"scrowl.template-quiz.component.js","mappings":"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","sources":["webpack://@scrowl/template-quiz/./src/quiz.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './_index.scss';\nimport { QuizProps } from './quiz.types';\n\n// @ts-ignore\nconst Quiz = ({ id, schema, lesson, ...props }: QuizProps) => {\n  const Scrowl = window['Scrowl'];\n  let classes = 'template-quiz';\n  const Markdown = Scrowl.core.Markdown;\n  const editMode = props.editMode ? true : false;\n  const focusElement = editMode ? props.focusElement : null;\n  const contentId = `${id}-quiz`;\n  const question = schema.content.question.content.question.value;\n  let answers: any = [];\n\n  Object.keys(schema.content).forEach((key) => {\n    if (key.includes('answer')) {\n      //@ts-ignore\n      answers.push(schema.content[key]);\n    }\n  });\n  let correctAnswers: any = [];\n  answers.forEach((answer) => {\n    //@ts-ignore\n    if (answer.content.correctness.value === true) {\n      correctAnswers.push(answer);\n    }\n  });\n\n  const textFocusCss = focusElement === 'text' && 'has-focus';\n  // const alignment = schema.content.options.content.alignment.value;\n  // const alignmentCss = alignment === 'right' ? 'right' : 'left';\n  const disableAnimations = schema.controlOptions.disableAnimations?.value;\n  const stopUserAdvancement = schema.controlOptions.stopUserAdvancement.value;\n  const showProgressBar = schema.content.options.content.showProgress.value;\n  const showProgressRef = useRef(showProgressBar);\n  const slideProgress = useRef(0);\n  const [progressBarStyles, setProgressBarStyles] = useState({\n    width: showProgressBar ? '0%' : '100%',\n  });\n  // const selectedAnswer = useRef(null);\n  const selectedAnswers: any = useRef([]);\n\n  if (showProgressBar) {\n    classes += ' show-progress';\n  }\n\n  const handleFocusQuestion = () => {\n    if (editMode) {\n      Scrowl.core.host.sendMessage({\n        type: 'focus',\n        field: 'question',\n      });\n    }\n  };\n\n  const handleSlideProgress = (ev) => {\n    slideProgress.current = ev.progress;\n\n    if (showProgressRef.current) {\n      setProgressBarStyles({\n        ...progressBarStyles,\n        width: `${ev.progress}%`,\n      });\n    }\n  };\n\n  const handleSlideEnd = () => {\n    slideProgress.current = 100;\n\n    if (!showProgressRef.current) {\n      return;\n    }\n\n    setProgressBarStyles({\n      ...progressBarStyles,\n      width: `100%`,\n    });\n  };\n\n  const handleSelectAnswer = (ev) => {\n    selectedAnswers.current.pop();\n    //@ts-ignore\n    selectedAnswers.current.push(ev.target.value);\n  };\n\n  const handleSelectAnswers = (ev) => {\n    if (ev.target.checked === true) {\n      //@ts-ignore\n      selectedAnswers.current.push(ev.target.value);\n    } else {\n      // @ts-ignore\n      const targetIndex = selectedAnswers.current.indexOf(ev.target.value);\n      selectedAnswers.current.splice(targetIndex, 1);\n    }\n  };\n\n  // console.log('selected answers: ', selectedAnswers);\n  // console.log('corrects: ', correctAnswers);\n\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n    if (correctAnswers.length <= 1) {\n      if (\n        selectedAnswers.current[0] ===\n        correctAnswers[0].content.answerText.value\n      ) {\n        alert('CORRECT');\n        const quizCompleted = new CustomEvent('quizCompleted', {\n          detail: {\n            question: question,\n            answer: correctAnswers[0].content.answerText.value,\n            contentId: contentId,\n            correct: true,\n          },\n        });\n        console.log('quizcompleted: ', quizCompleted);\n        document.dispatchEvent(quizCompleted);\n      } else {\n        alert('INCORRECT');\n        const quizCompleted = new CustomEvent('quizCompleted', {\n          detail: {\n            question: question,\n            answer: correctAnswers[0].content.answerText.value,\n            contentId: contentId,\n            correct: false,\n          },\n        });\n        document.dispatchEvent(quizCompleted);\n      }\n    } else {\n      let passFlag = true;\n      correctAnswers.forEach((answer) => {\n        if (selectedAnswers.current)\n          if (\n            !selectedAnswers.current.includes(answer.content.answerText.value)\n          ) {\n            passFlag = false;\n          }\n      });\n\n      if (\n        passFlag &&\n        selectedAnswers.current.length === correctAnswers.length\n      ) {\n        alert('CORRECT');\n        const quizCompleted = new CustomEvent('quizCompleted', {\n          detail: {\n            question: question,\n            answer: correctAnswers[0].content.answerText.value,\n            contentId: contentId,\n            correct: true,\n          },\n        });\n        document.dispatchEvent(quizCompleted);\n      } else {\n        alert('INCORRECT');\n        const quizCompleted = new CustomEvent('quizCompleted', {\n          detail: {\n            question: question,\n            answer: correctAnswers[0].content.answerText.value,\n            contentId: contentId,\n            correct: false,\n          },\n        });\n        document.dispatchEvent(quizCompleted);\n      }\n    }\n  };\n\n  useEffect(() => {\n    showProgressRef.current = showProgressBar;\n    setProgressBarStyles({\n      ...progressBarStyles,\n      width: showProgressBar ? `${slideProgress.current}%` : `100%`,\n    });\n  }, [showProgressBar]);\n\n  return (\n    <Scrowl.core.Template\n      id={`slide-${contentId}`}\n      className={classes}\n      onProgress={handleSlideProgress}\n      onEnd={handleSlideEnd}\n      notScene={disableAnimations ? true : false}\n      // @ts-ignore\n      stopUserAdvancement={stopUserAdvancement}\n      {...props}\n    >\n      <div id={contentId} className=\"owlui-container\">\n        <div className={`owlui-row`}>\n          <div className={`owlui-col text__wrapper`}>\n            <div className=\"text__container\">\n              <div className=\"progress-indictor\">\n                <div className=\"progress-bar\" style={progressBarStyles}></div>\n              </div>\n              <div className={`text__value can-focus ${textFocusCss}`}>\n                <h3\n                  onMouseDown={handleFocusQuestion}\n                  className=\"question__text\"\n                >\n                  <Markdown>{question}</Markdown>\n                </h3>\n\n                <div className={`answers__container`}>\n                  <form onSubmit={handleSubmit}>\n                    {/* @ts-ignore */}\n                    {answers.map((answer, idx) => {\n                      return (\n                        <div className=\"answer\" key={idx}>\n                          <input\n                            type={\n                              correctAnswers.length > 1 ? 'checkbox' : 'radio'\n                            }\n                            id={`${contentId}-answer-${idx}`}\n                            name={question}\n                            // @ts-ignore\n                            value={answer.content.answerText.value}\n                            onChange={\n                              correctAnswers.length > 1\n                                ? handleSelectAnswers\n                                : handleSelectAnswer\n                            }\n                          />\n                          <label htmlFor={`${contentId}-answer-${idx}`}>\n                            {/* @ts-ignore */}\n                            {answer.content.answerText.value}\n                          </label>\n                        </div>\n                      );\n                    })}\n                    <input\n                      className=\"owlui-btn owlui-btn-primary submit-answer\"\n                      type=\"submit\"\n                      value=\"Submit\"\n                    />\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Scrowl.core.Template>\n  );\n};;;;\n\nexport { Quiz as default };\n"],"names":["Quiz","id","schema","lesson","props","Scrowl","window","classes","Markdown","core","editMode","focusElement","contentId","question","content","value","answers","Object","keys","forEach","key","includes","push","correctAnswers","answer","correctness","textFocusCss","disableAnimations","controlOptions","stopUserAdvancement","showProgressBar","options","showProgress","showProgressRef","useRef","slideProgress","progressBarStyles","setProgressBarStyles","useState","width","selectedAnswers","handleSelectAnswer","ev","current","pop","target","handleSelectAnswers","checked","targetIndex","indexOf","splice","useEffect","Template","className","onProgress","progress","onEnd","notScene","style","onMouseDown","host","sendMessage","type","field","onSubmit","preventDefault","length","answerText","alert","quizCompleted","CustomEvent","detail","correct","console","log","document","dispatchEvent","passFlag","map","idx","name","onChange","htmlFor"],"sourceRoot":""}