!function(e,o){if("object"==typeof exports&&"object"==typeof module)module.exports=o();else if("function"==typeof define&&define.amd)define([],o);else{var n=o();for(var t in n)("object"==typeof exports?exports:e)[t]=n[t]}}(self,(()=>(()=>{"use strict";var e={r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},o={};return e.r(o),window.scrowlProxy={invoke:(e,...o)=>new Promise((o=>{const n=`Unable to invoke ${e}: method not ready`;console.warn(n),o({error:!0,message:n,data:{}})})),on:(e,o)=>{console.warn(`Unable to set on listener for ${e}: method not ready`)},send:(e,...o)=>{console.warn(`Unable to send ${e}: method not ready`)},removeListener:(e,o)=>{console.warn(`Unable to remove listener for ${e}: method not ready`)},removeListenerAll:e=>{console.warn("Unable to remove listeners: method not ready")}},o})()));
//# sourceMappingURL=proxy-web.js.map