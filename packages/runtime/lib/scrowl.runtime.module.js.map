{"mappings":"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","sources":["packages/runtime/src/index.ts","packages/runtime/src/runtime.types.ts","packages/runtime/src/runtime.ts","packages/runtime/src/versions/runtimeScorm2004.ts","packages/runtime/src/versions/runtimeScorm12.ts"],"sourcesContent":["export * from './runtime.types';\nexport * from './runtime';\n","export type CMIElement = string;\nexport type CMIElementValue = string | number | undefined;\nexport type CMIErrorCode = string;\nexport type SCORM_STATUS_UPDATE = 'true' | 'false';\nexport type SCORM_STATUS_LESSON = 'success' | 'failed' | 'done' | 'active' | 'viewed' | 'unseen';\nexport type SCORM_STATUS_EXIT = 'timeout' | 'save' | 'logout'\n\nexport type SCORM_API = {\n  Commit: (msg?: string) => SCORM_STATUS_UPDATE;\n  GetDiagnostic: (errorCode: CMIErrorCode) => string;\n  GetErrorString: (errorCode: CMIErrorCode) => string;\n  GetLastError: () => CMIErrorCode;\n  GetValue: (element: CMIElement) => string;\n  Initialize: (msg?: string) => SCORM_STATUS_UPDATE;\n  LMSCommit: (msg?: string) => SCORM_STATUS_UPDATE;\n  LMSFinish: (msg?: string) => SCORM_STATUS_UPDATE;\n  LMSGetDiagnostic: (errorCode: CMIErrorCode) => string;\n  LMSGetErrorString: (errorCode: CMIErrorCode) => string;\n  LMSGetLastError: () => CMIErrorCode;\n  LMSGetValue: (element: CMIElement) => string;\n  LMSInitialize: (msg?: string) => SCORM_STATUS_UPDATE;\n  LMSSetValue: (element: CMIElement, value: string | number) => string;\n  SetValue: (element: CMIElement, value: string | number) => string;\n  Terminate: (msg?: string) => SCORM_STATUS_UPDATE;\n  apolloClient: {\n    [key: string]: any;\n  };\n  checkCompletion_1_2: () => void;\n  checkCompletion_2004: () => void;\n  deflateString: () => void;\n  failed_1_2: () => void;\n  failed_2004: () => void;\n  inflateString: () => void;\n  moduleId: string;\n  mutate: () => void;\n  onFailure: () => void;\n  onSuccess: () => void;\n  passed_1_2: () => void;\n  passed_2004: () => void;\n  scormData: {\n    [key: string]: string | boolean | number;\n  };\n  trainSessionId: string;\n};\n\nexport type GENERIC_DATA = {\n  [key: string]: any;\n};\n\nexport interface RUNTIME_SERVICE_API_RESULT_READY {\n  error: false;\n  API: SCORM_API;\n}\n\nexport interface RUNTIME_SERVICE_API_RESULT_ERROR {\n  error: true;\n  message: string;\n}\n\nexport type RUNTIME_SERVICE_API_RESULT =\n  | RUNTIME_SERVICE_API_RESULT_READY\n  | RUNTIME_SERVICE_API_RESULT_ERROR;\n\nexport type RUNTIME_SERVICE_RESULT = {\n  error: boolean;\n  message?: string;\n  data?: string | GENERIC_DATA;\n};\n\nexport type RUNTIME_WRAPPER = {\n  version: '1.2' | '2004v4' | '2004v3' | null;\n  API: SCORM_API | null;\n  _scanApi: (win: Window, v: string) => SCORM_API;\n  start: (\n    apiPreference: '1.2' | '2004v4' | '2004v3' | null\n  ) => [error: boolean];\n};\n\nexport type RUNTIME_SERVICE = {\n  version: '1.2' | '2004v4' | '2004v3' | null;\n  API?: SCORM_API | null;\n  init: boolean;\n  finished: boolean;\n  _time: {\n    startTime: undefined | Date;\n    end: undefined | Date;\n    getSessionTime: () => string;\n    convert: (total: number) => string;\n  };\n  commit: () => [error: boolean];\n  exit: () => [error: boolean];\n  isInitialized: () =>\n    | [error: true, API: SCORM_API]\n    | [error: false, API: false];\n  start: (api: any) => [error: boolean];\n  updateLocation: (location: any, slideId: string) => [error: boolean];\n  updateProgress: (progressPercentage: number) => [error: boolean];\n  isAvailable?: () => RUNTIME_SERVICE_API_RESULT;\n  getError: (printError?: boolean) => RUNTIME_SERVICE_RESULT;\n  getProgress: () => [error: boolean, progress: any];\n  getLocation: () => [error: boolean, location: any];\n  getSuspendData: () => [error: boolean, suspendData: any];\n  setCourseStart: () => [error: false] | [error: true, courseData: any];\n  save?: () => RUNTIME_SERVICE_RESULT;\n  stop?: () => RUNTIME_SERVICE_RESULT;\n  setValue: (elem: CMIElement, val: CMIElementValue) => [error: boolean];\n  getValue: (elem: CMIElement) => [error: boolean, value: string];\n  updateStatus?: (status: SCORM_STATUS_LESSON) => RUNTIME_SERVICE_RESULT;\n  finish: () => [error: boolean];\n};\n\nexport type RUNTIME_SERVICE_WRAPPER = Partial<RUNTIME_SERVICE> &\n  RUNTIME_WRAPPER;","/*\n  SCORM API REF\n  https://scorm.com/scorm-explained/technical-scorm/run-time/run-time-reference/\n*/\nimport { RUNTIME_SERVICE_WRAPPER } from './runtime.types';\nimport { service as service2004 } from '../src/versions/runtimeScorm2004';\nimport { service as service12 } from '../src/versions/runtimeScorm12';\n\nexport const service: RUNTIME_SERVICE_WRAPPER = {\n  API: null,\n  version: '1.2',\n  _scanApi: (win, v) => {\n    let retries = 0;\n    // Check to see if the window (win) contains the API\n    // if the window (win) does not contain the API and\n    // the window (win) has a parent window and the parent window\n    // is not the same as the window (win)\n\n    while (win[v] == null && win.parent != null && win.parent != win) {\n      // increment the number of findAPITries\n      retries++;\n\n      // Note: 7 is an arbitrary number, but should be more than sufficient\n      if (retries > 7) {\n        alert('Error finding API -- too deeply nested.');\n        return null;\n      }\n\n      // set the variable that represents the window being\n      // being searched to be the parent of the current window\n      // then search for the API again\n      win = win.parent;\n    }\n\n    return win[v];\n  },\n  // @ts-ignore\n  start: (apiPreference) => {\n    let API;\n\n    switch (apiPreference) {\n      case service2004.version:\n        API = service._scanApi(window, 'API_1484_11');\n        service.version = apiPreference;\n        Object.assign(service, service2004);\n        break;\n      case service12.version:\n      default:\n        API = service._scanApi(window, 'API');\n        service.version = apiPreference;\n        Object.assign(service, service12);\n        break;\n    }\n\n    if (!API) {\n      console.error('Unable to start scorm runtime service');\n      return [false];\n    }\n\n    service.API = API;\n\n    // @ts-ignore\n    service.start(API);\n\n    return [true];\n  },\n};\n\nexport default {\n  service,\n}\n","/*\n  SCORM API REF\n  https://scorm.com/scorm-explained/technical-scorm/run-time/run-time-reference/\n*/\nimport { RUNTIME_SERVICE } from '../runtime.types';\n\nexport const service: RUNTIME_SERVICE = {\n  version: '2004v3',\n  init: false,\n  finished: false,\n  _time: {\n    startTime: undefined,\n    getSessionTime: () => {\n      let sessionTime;\n      if (service._time.startTime) {\n        sessionTime = new Date().getTime() - service._time.startTime.getTime();\n      }\n      return service._time.convert(sessionTime);\n    },\n    end: undefined,\n    convert: (total) => {\n      let totalMs = total % 1000;\n      let totalS = ((total - totalMs) / 1000) % 60;\n      let totalM = ((total - totalMs - totalS * 1000) / 60000) % 60;\n      let totalH = (total - totalMs - totalS * 1000 - totalM * 60000) / 3600000;\n\n      if (totalH == 10000) {\n        totalH = 9999;\n        totalM = (total - totalH * 3600000) / 60000;\n\n        if (totalM == 100) {\n          totalM = 99;\n        }\n\n        totalM = Math.floor(totalM);\n        totalS = (total - totalH * 3600000 - totalM * 60000) / 1000;\n\n        if (totalS == 100) {\n          totalS = 99;\n        }\n\n        totalS = Math.floor(totalS);\n        totalMs = total - totalH * 3600000 - totalM * 60000 - totalS * 1000;\n      }\n\n      let timespan = 'PT' + totalH + 'H' + totalM + 'M' + totalS + 'S';\n\n      if (totalH > 9999) {\n        timespan = '9999:99:99';\n      }\n\n      return timespan;\n    },\n  },\n  API: null,\n  getError: (printError) => {\n    printError =\n      printError === undefined || printError === null ? true : printError;\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit) {\n      return {\n        error: true,\n        message: 'Service is not initialized',\n      };\n    }\n\n    const errorId = API.GetLastError();\n    const errorMsg = API.GetErrorString(errorId);\n    const errorStack = API.GetDiagnostic(errorId);\n    const apiError = {\n      id: errorId,\n      message: errorMsg,\n      stack: errorStack,\n    };\n\n    if (printError) {\n      console.error(`Error:\\n${JSON.stringify(apiError, null, 2)}`);\n      const errorEvent = new CustomEvent('scormError', {\n        detail: apiError,\n      });\n      document.dispatchEvent(errorEvent);\n\n      return {\n        error: true,\n        data: apiError,\n      };\n    }\n\n    return {\n      error: false,\n      data: apiError,\n    };\n  },\n  commit: () => {\n    console.debug(`API.Commit`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true];\n    }\n\n    service.setValue('cmi.session_time', service._time.getSessionTime());\n    API.Commit('');\n    return [false];\n  },\n  exit: () => {\n    console.debug('API.Exit');\n    return service.commit();\n  },\n  isInitialized: () => {\n    service.init = false;\n\n    if (!service.API) {\n      console.error('MISSING_SCORM_API - INIT');\n      return [service.init, false];\n    }\n\n    // @ts-ignore\n    if (service.API.Initialized === 'false') {\n      console.error('API failed to initialize');\n      return [service.init, false];\n    }\n\n    service.init = true;\n    return [service.init, service.API];\n  },\n  updateLocation: (location, slideId) => {\n    console.debug(`API.UpdateLocation`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true];\n    }\n\n    service.setValue(\n      'cmi.location',\n      JSON.stringify({ v1: 1, ...location, slideId: slideId })\n    );\n\n    service.commit();\n    return [false];\n  },\n  getLocation: () => {\n    console.debug(`API.GetLocation`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true, {}];\n    }\n    try {\n      const [error, location] = service.getValue('cmi.location');\n\n      if (error || !location) {\n        return [true, {}];\n      }\n\n      return [false, JSON.parse(location)];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  getSuspendData: () => {\n    console.debug(`API.GetSuspendData`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get suspend data: service not initialized`);\n      return [true, {}];\n    }\n    try {\n      const [error, suspendData] = service.getValue('cmi.suspend_data');\n\n      if (error || !suspendData) {\n        return [true, {}];\n      }\n\n      return [false, suspendData];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  setCourseStart: () => {\n    console.debug(`API.SetCourseStart`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to update suspend data: service not initialized`);\n      return [true, {}];\n    }\n    service.setValue(\n      'cmi.suspend_data',\n      JSON.stringify({ courseStarted: true })\n    );\n    service.commit();\n\n    return [false];\n  },\n  getProgress: () => {\n    console.debug(`API.GetProgress`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get progress: service not initialized`);\n      return [true, {}];\n    }\n\n    try {\n      const [error, progress] = service.getValue('cmi.progress_measure');\n\n      if (error || !progress) {\n        return [true, {}];\n      }\n\n      return [false, progress];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  updateProgress: (progressPercentage) => {\n    console.debug(`API.UpdateProgress`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to update progress: service not initialized`);\n      return [true];\n    }\n\n    const [progressError, previousProgress] = service.getValue(\n      'cmi.progress_measure'\n    );\n\n    // error 403 = Data Model Element Value Not Initialized (first time setting progress)\n    // @ts-ignore\n    if (progressError && previousProgress.data.id === '403') {\n      service.setValue('cmi.progress_measure', progressPercentage);\n      service.commit();\n    }\n\n    if (!progressError) {\n      if (\n        !previousProgress ||\n        parseFloat(previousProgress) === 0 ||\n        progressPercentage > parseFloat(previousProgress)\n      ) {\n        service.setValue('cmi.progress_measure', progressPercentage);\n      }\n      service.commit();\n    }\n\n    return [false];\n  },\n  start: (api) => {\n    console.debug(`API.Start 2004v3`);\n\n    service.API = api;\n    service._time.startTime = new Date();\n    service.API?.Initialize('');\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      return [true];\n    }\n\n    const [statusError, completionStatus] = service.getValue(\n      'cmi.completion_status'\n    );\n\n    if (statusError) {\n      return [true];\n    }\n\n    if (completionStatus === 'unknown') {\n      service.setValue('cmi.completion_status', 'incomplete');\n      service.setValue('cmi.success_status', 'unknown');\n      service.setValue('cmi.suspend_data', '{}');\n      service.setValue('cmi.progress_measure', 0);\n      const startLocation = {\n        cur: {\n          m: 0,\n          l: 0,\n          s: 0,\n        },\n        max: {\n          m: 0,\n          l: 0,\n          s: 0,\n        },\n      };\n      service.setValue('cmi.location', JSON.stringify(startLocation));\n    } else {\n      service.setValue(\n        'cmi.success_status',\n        service.getValue('cmi.success_status')[1]\n      );\n      service.setValue(\n        'cmi.progress_measure',\n        service.getValue('cmi.progress_measure')[1]\n      );\n      service.setValue(\n        'cmi.completion_status',\n        service.getValue('cmi.completion_status')[1]\n      );\n    }\n\n    // until we have things hooked up to exit buttons/nav, set exit to 'suspend' as part of start() so that status persists whether the user finishes or exits\n    service.setValue('cmi.exit', 'suspend');\n    service.commit();\n\n    console.debug('runtime started');\n\n    return [false];\n  },\n  finish: () => {\n    console.debug(`API.Finish`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to finish: service not initialized`);\n      return [true];\n    }\n\n    service.setValue('cmi.score.min', 0);\n    service.setValue('cmi.score.max', 100);\n    service.setValue('cmi.score.scaled', 1);\n    service.setValue('cmi.score.raw', 100);\n    service.setValue('cmi.success_status', 'passed');\n    service.setValue('cmi.progress_measure', 1);\n    service.setValue('cmi.completion_status', 'completed');\n    service.commit();\n    API.Terminate('');\n\n    return [false];\n  },\n  setValue: (elem, val) => {\n    console.debug(`API.SetValue for ${elem} to ${val}`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to set value for ${elem}: service not initialized`);\n      return [true];\n    }\n\n    if (val !== undefined) {\n      if (API.SetValue(elem, val) === 'false') {\n        service.getError(true);\n      }\n    } else {\n      console.warn(`Unable to set value for ${elem}: value undefined`);\n    }\n\n    return [false];\n  },\n  getValue: (elem) => {\n    console.debug(`API.GetValue for ${elem}`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to set value for ${elem}: service not initialized`);\n      return [true, ''];\n    }\n\n    const getRes = API.GetValue(elem);\n\n    if (getRes === '') {\n      console.error(`API failed to get value for: ${elem}`);\n      service.getError(true);\n    }\n\n    return [false, getRes];\n  },\n};\n\nexport default {\n  service,\n};\n","/*\n  SCORM API REF\n  https://scorm.com/scorm-explained/technical-scorm/run-time/run-time-reference/\n*/\nimport { RUNTIME_SERVICE } from '../runtime.types';\n\nexport const service: RUNTIME_SERVICE = {\n  version: '1.2',\n  init: false,\n  finished: false,\n  _time: {\n    startTime: undefined,\n    getSessionTime: () => {\n      let sessionTime;\n      if (service._time.startTime) {\n        sessionTime = new Date().getTime() - service._time.startTime.getTime();\n      }\n      return service._time.convert(sessionTime);\n    },\n    end: undefined,\n    convert: (total) => {\n      function ZeroPad(val: number, pad: number) {\n        let res = new String(val);\n        const len = res.length;\n\n        if (len > pad) {\n          return res.substr(0, pad);\n        }\n\n        for (let i = len; i < pad; i++) {\n          res = '0' + res;\n        }\n\n        return res;\n      }\n\n      let totalMs = total % 1000;\n      let totalS = ((total - totalMs) / 1000) % 60;\n      let totalM = ((total - totalMs - totalS * 1000) / 60000) % 60;\n      let totalH = (total - totalMs - totalS * 1000 - totalM * 60000) / 3600000;\n\n      if (totalH == 10000) {\n        totalH = 9999;\n        totalM = (total - totalH * 3600000) / 60000;\n\n        if (totalM == 100) {\n          totalM = 99;\n        }\n\n        totalM = Math.floor(totalM);\n        totalS = (total - totalH * 3600000 - totalM * 60000) / 1000;\n\n        if (totalS == 100) {\n          totalS = 99;\n        }\n\n        totalS = Math.floor(totalS);\n        totalMs = total - totalH * 3600000 - totalM * 60000 - totalS * 1000;\n      }\n\n      // should eventually check SCORM version and format time accordingly\n      let timespan =\n        ZeroPad(totalH, 4) +\n        ':' +\n        ZeroPad(totalM, 2) +\n        ':' +\n        ZeroPad(totalS, 2);\n\n      if (totalH > 9999) {\n        timespan = '9999:99:99';\n      }\n\n      return timespan;\n    },\n  },\n  API: null,\n  getError: (printError) => {\n    printError =\n      printError === undefined || printError === null ? true : printError;\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit) {\n      return {\n        error: true,\n        message: 'Service is not initialized',\n      };\n    }\n\n    const errorId = API.LMSGetLastError();\n    const errorMsg = API.LMSGetErrorString(errorId);\n    const errorStack = API.LMSGetDiagnostic(errorId);\n    const apiError = {\n      id: errorId,\n      message: errorMsg,\n      stack: errorStack,\n    };\n\n    if (printError) {\n      console.error(`Error:\\n${JSON.stringify(apiError, null, 2)}`);\n      const errorEvent = new CustomEvent('scormError', {\n        detail: apiError,\n      });\n      document.dispatchEvent(errorEvent);\n    }\n\n    return {\n      error: false,\n      data: apiError,\n    };\n  },\n  commit: () => {\n    console.debug(`API.Commit`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true];\n    }\n\n    service.setValue('cmi.core.session_time', service._time.getSessionTime());\n    API.LMSCommit('');\n    return [false];\n  },\n  exit: () => {\n    console.debug('API.Exit');\n    return service.commit();\n  },\n  isInitialized: () => {\n    service.init = false;\n\n    if (!service.API) {\n      console.error('MISSING_SCORM_API - INIT');\n      return [service.init, false];\n    }\n\n    // @ts-ignore\n    if (service.API.Initialized === 'false') {\n      console.error('API failed to initialize');\n      return [service.init, false];\n    }\n\n    service.init = true;\n    return [service.init, service.API];\n  },\n  updateLocation: (location, slideId) => {\n    console.debug(`API.UpdateLocation`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true];\n    }\n\n    service.setValue(\n      'cmi.core.lesson_location',\n      JSON.stringify({ v1: 1, ...location, slideId: slideId })\n    );\n\n    service.commit();\n    return [false];\n  },\n  getLocation: () => {\n    console.debug(`API.GetLocation`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true, {}];\n    }\n    try {\n      const [error, location] = service.getValue('cmi.core.lesson_location');\n\n      if (error || !location) {\n        return [true, {}];\n      }\n\n      return [false, JSON.parse(location)];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  setCourseStart: () => {\n    console.debug(`API.SetCourseStart`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to set suspend data: service not initialized`);\n      return [true, {}];\n    }\n    service.setValue(\n      'cmi.suspend_data',\n      JSON.stringify({ courseStarted: true })\n    );\n    service.commit();\n\n    return [false];\n  },\n  getSuspendData: () => {\n    console.debug(`API.GetSuspendData`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get suspend data: service not initialized`);\n      return [true, {}];\n    }\n\n    try {\n      const [error, suspendData] = service.getValue('cmi.suspend_data');\n\n      if (error || !suspendData) {\n        return [true, {}];\n      }\n\n      return [false, suspendData];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  getProgress: () => {\n    console.debug(`API.GetProgress`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get progress: service not initialized`);\n      return [true, {}];\n    }\n\n    try {\n      const [error, progress] = service.getValue('cmi.suspend_data');\n\n      if (error || !progress) {\n        return [true, {}];\n      }\n\n      return [false, progress];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  updateProgress: (progressPercentage) => {\n    console.debug(`API.UpdateProgress`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to update progress: service not initialized`);\n      return [true];\n    }\n\n    const [progressError, previousProgress] =\n      service.getValue('cmi.suspend_data');\n\n    // error 403 = Data Model Element Value Not Initialized (first time setting progress)\n    // @ts-ignore\n    if (progressError && previousProgress.data.id === '403') {\n      service.setValue('cmi.suspend_data', progressPercentage);\n      service.commit();\n    }\n\n    if (!progressError) {\n      if (\n        !previousProgress ||\n        parseFloat(previousProgress) === 0 ||\n        progressPercentage > parseFloat(previousProgress)\n      ) {\n        service.setValue('cmi.suspend_data', progressPercentage);\n      }\n      service.commit();\n    }\n\n    return [false];\n  },\n  start: (api) => {\n    console.debug(`API.Start 1.2`);\n    service._time.startTime = new Date();\n\n    service.API = api;\n\n    service.API?.LMSInitialize('');\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      return [true];\n    }\n\n    const [statusError, lessonStatus] = service.getValue(\n      'cmi.core.lesson_status'\n    );\n\n    if (statusError) {\n      return [true];\n    }\n\n    if (lessonStatus === 'unknown' || lessonStatus === 'not attempted') {\n      service.setValue('cmi.core.lesson_status', 'incomplete');\n      service.setValue('cmi.suspend_data', 0);\n\n      const startLocation = {\n        cur: {\n          m: 0,\n          l: 0,\n          s: 0,\n        },\n        max: {\n          m: 0,\n          l: 0,\n          s: 0,\n        },\n      };\n      service.setValue(\n        'cmi.core.lesson_location',\n        JSON.stringify(startLocation)\n      );\n    } else {\n      service.setValue(\n        'cmi.core.lesson_status',\n        service.getValue('cmi.core.lesson_status')[1]\n      );\n      service.setValue(\n        'cmi.suspend_data',\n        service.getValue('cmi.suspend_data')[1]\n      );\n    }\n\n    // until we have things hooked up to exit buttons/nav, set exit to 'suspend' as part of start() so that status persists whether the user finishes or exits\n    service.setValue('cmi.core.exit', 'suspend');\n    service.commit();\n\n    console.debug('runtime started');\n\n    return [false];\n  },\n  finish: () => {\n    console.debug(`API.Finish`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to finish: service not initialized`);\n      return [true];\n    }\n\n    service.setValue('cmi.core.score.raw', 100);\n    service.setValue('cmi.core.lesson_status', 'passed');\n    service.setValue('cmi.suspend_data', 1);\n    service.commit();\n    API.LMSFinish('');\n\n    return [false];\n  },\n  setValue: (elem, val) => {\n    console.debug(`API.SetValue for ${elem} to ${val}`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to set value for ${elem}: service not initialized`);\n      return [true];\n    }\n\n    if (val !== undefined) {\n      if (API.LMSSetValue(elem, val) === 'false') {\n        service.getError(true);\n      }\n    } else {\n      console.warn(`Unable to set value for ${elem}: value undefined`);\n    }\n\n    return [false];\n  },\n  getValue: (elem) => {\n    console.debug(`API.GetValue for ${elem}`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to set value for ${elem}: service not initialized`);\n      return [true, ''];\n    }\n\n    const getRes = API.LMSGetValue(elem);\n\n    if (getRes === '') {\n      console.error(`API failed to get value for: ${elem}`);\n      service.getError(true);\n    }\n\n    return [false, getRes];\n  },\n};\n\nexport default {\n  service,\n};\n"],"names":[],"version":3,"file":"scrowl.runtime.module.js.map"}