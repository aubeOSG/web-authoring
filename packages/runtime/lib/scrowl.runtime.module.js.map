{"mappings":"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","sources":["packages/runtime/src/index.ts","packages/runtime/src/runtime.types.ts","packages/runtime/src/runtime.ts"],"sourcesContent":["export * from './runtime.types';\nexport * from './runtime';\n","export type CMIELement = string;\nexport type CMIErrorCode = string;\nexport type SCORM_STATUS_UPDATE = 'true' | 'false';\nexport type SCORM_STATUS_LESSON = 'success' | 'failed' | 'done' | 'active' | 'viewed' | 'unseen';\nexport type SCORM_STATUS_EXIT = 'timeout' | 'save' | 'logout'\n\nexport type SCORM_API = {\n  Commit: (msg?: string) => SCORM_STATUS_UPDATE;\n  GetDiagnostic: (errorCode: CMIErrorCode) => string;\n  GetErrorString: (errorCode: CMIErrorCode) => string;\n  GetLastError: () => CMIErrorCode;\n  GetValue: (element: CMIELement) => string;\n  Initialize: (msg?: string) => SCORM_STATUS_UPDATE;\n  LMSCommit: (msg?: string) => SCORM_STATUS_UPDATE;\n  LMSFinish: (msg?: string) => SCORM_STATUS_UPDATE;\n  LMSGetDiagnostic: (errorCode: CMIErrorCode) => string;\n  LMSGetErrorString: (errorCode: CMIErrorCode) => string;\n  LMSGetLastError: () => CMIErrorCode;\n  LMSGetValue: (element: CMIELement) => string;\n  LMSInitialize: (msg?: string) => SCORM_STATUS_UPDATE;\n  LMSSetValue: (element: CMIELement, value: string | number) => string;\n  SetValue: (element: CMIELement, value: string) => string;\n  Terminate: (msg?: string) => SCORM_STATUS_UPDATE;\n  apolloClient: {\n    [key: string]: any;\n  };\n  checkCompletion_1_2: () => void;\n  checkCompletion_2004: () => void;\n  deflateString: () => void;\n  failed_1_2: () => void;\n  failed_2004: () => void;\n  inflateString: () => void;\n  moduleId: string;\n  mutate: () => void;\n  onFailure: () => void;\n  onSuccess: () => void;\n  passed_1_2: () => void;\n  passed_2004: () => void;\n  scormData: {\n    [key: string]: string | boolean | number;\n  };\n  trainSessionId: string;\n};\n\nexport type GENERIC_DATA = {\n  [key: string]: any;\n};\n\nexport interface RUNTIME_SERVICE_API_RESULT_READY {\n  error: false;\n  API: SCORM_API;\n}\n\nexport interface RUNTIME_SERVICE_API_RESULT_ERROR {\n  error: true;\n  message: string;\n}\n\nexport type RUNTIME_SERVICE_API_RESULT =\n  | RUNTIME_SERVICE_API_RESULT_READY\n  | RUNTIME_SERVICE_API_RESULT_ERROR;\n\nexport type RUNTIME_SERVICE_RESULT = {\n  error: boolean;\n  message?: string;\n  data?: string | GENERIC_DATA;\n};\n\nexport type RUNTIME_SERVICE = {\n  API?: SCORM_API;\n  init: boolean;\n  finished: boolean;\n  _time: {\n    start: undefined | Date;\n    end: undefined | Date;\n    convert: (total: number) => string;\n  };\n  STATUSES: {\n    update: {\n      true: 'true';\n      false: 'false';\n    };\n    lesson: {\n      success: 'passed';\n      failed: 'failed';\n      done: 'completed';\n      active: 'incomplete';\n      viewed: 'browsed';\n      unseen: 'not attempted';\n    };\n    exit: {\n      timeout: 'time-out';\n      save: 'suspend';\n      logout: 'logout';\n    };\n  };\n  isAvailable: () => RUNTIME_SERVICE_API_RESULT;\n  getError: (printError?: boolean) => RUNTIME_SERVICE_RESULT;\n  _findAPI: (source: Window) => RUNTIME_SERVICE_API_RESULT;\n  start: () => RUNTIME_SERVICE_RESULT;\n  save: () => RUNTIME_SERVICE_RESULT;\n  stop: () => RUNTIME_SERVICE_RESULT;\n  setValue: (elem: CMIELement, val: string | number) => RUNTIME_SERVICE_RESULT;\n  getValue: (elem: CMIELement) => RUNTIME_SERVICE_RESULT;\n  updateStatus: (status: SCORM_STATUS_LESSON) => RUNTIME_SERVICE_RESULT;\n  finish: () => void;\n  exit: () => RUNTIME_SERVICE_RESULT;\n};\n","/*\n  SCORM API REF\n  https://scorm.com/scorm-explained/technical-scorm/run-time/run-time-reference/\n*/\nimport { RUNTIME_SERVICE } from \"./runtime.types\";\n\nconst hasProp = (obj: {}, prop: string) => {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n\nexport const service: RUNTIME_SERVICE = {\n  init: false,\n  finished: false,\n  _time: {\n    start: undefined,\n    end: undefined,\n    convert: (total) => {\n      function ZeroPad(val: number, pad: number) {\n        let res = new String(val);\n        const len = res.length;\n\n        if (len > pad) {\n          return res.substr(0, pad);\n        }\n\n        for (let i = len; i < pad; i++) {\n          res = '0' + res;\n        }\n\n        return res;\n      }\n\n      let totalMs = total % 1000;\n      let totalS = ((total - totalMs) / 1000) % 60;\n      let totalM = ((total - totalMs - totalS * 1000) / 60000) % 60;\n      let totalH = (total - totalMs - totalS * 1000 - totalM * 60000) / 3600000;\n\n      if (totalH == 10000) {\n        totalH = 9999;\n        totalM = (total - totalH * 3600000) / 60000;\n\n        if (totalM == 100) {\n          totalM = 99;\n        }\n\n        totalM = Math.floor(totalM);\n        totalS = (total - totalH * 3600000 - totalM * 60000) / 1000;\n\n        if (totalS == 100) {\n          totalS = 99;\n        }\n\n        totalS = Math.floor(totalS);\n        totalMs = total - totalH * 3600000 - totalM * 60000 - totalS * 1000;\n      }\n\n      let timespan =\n        ZeroPad(totalH, 4) +\n        ':' +\n        ZeroPad(totalM, 2) +\n        ':' +\n        ZeroPad(totalS, 2);\n\n      if (totalH > 9999) {\n        timespan = '9999:99:99';\n      }\n\n      return timespan;\n    },\n  },\n  STATUSES: {\n    update: {\n      true: 'true',\n      false: 'false',\n    },\n    lesson: {\n      success: 'passed',\n      failed: 'failed',\n      done: 'completed',\n      active: 'incomplete',\n      viewed: 'browsed',\n      unseen: 'not attempted',\n    },\n    exit: {\n      timeout: 'time-out',\n      save: 'suspend',\n      logout: 'logout',\n    },\n  },\n  isAvailable: () => {\n    const isReady = service.init && !service.finished;\n\n    if (!isReady || !service.API) {\n      return {\n        error: true,\n        message: 'Service is unavailable',\n      };\n    }\n\n    return {\n      error: false,\n      API: service.API,\n    };\n  },\n  getError: (printError) => {\n    printError =\n      printError === undefined || printError === null ? true : printError;\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    const errorId = res.API.LMSGetLastError();\n    const errorMsg = res.API.LMSGetErrorString(errorId);\n    const errorStack = res.API.LMSGetDiagnostic(errorId);\n    const apiError = {\n      id: errorId,\n      message: errorMsg,\n      stack: errorStack,\n    };\n\n    if (printError) {\n      console.error(`Error:\\n${JSON.stringify(apiError, null, 2)}`);\n    }\n\n    return {\n      error: false,\n      data: apiError,\n    };\n  },\n  _findAPI: (source) => {\n    let retryCnt = 0;\n    const retryLimit = 7;\n\n    if (source.API) {\n      return {\n        error: false,\n        API: source.API,\n      };\n    }\n\n    if (source.parent === source) {\n      return {\n        error: true,\n        message: 'Error: unable to find API - top level reached',\n      };\n    }\n\n    while (\n      source.API == null &&\n      source.parent != null &&\n      retryCnt < retryLimit\n    ) {\n      retryCnt++;\n      source = source.parent;\n    }\n\n    if (retryCnt >= retryLimit) {\n      return {\n        error: true,\n        message: 'Error: unable to find API - nested to deep',\n      };\n    }\n\n    return {\n      error: false,\n      API: source.API,\n    };\n  },\n  start: () => {\n    const resFind = service._findAPI(window);\n\n    if (resFind.error) {\n      return resFind;\n    }\n\n    service.API = resFind.API;\n    service._time.start = new Date();\n    service.init = true;\n\n    const resInit = service.API.LMSInitialize();\n\n    if (resInit === service.STATUSES.update.false) {\n      return {\n        error: true,\n        message: 'SCORM service failed to initialize',\n        data: service.getError(),\n      };\n    }\n\n    service.setValue('cmi.core.score.min', 90.0);\n    // service.setValue('cmi.core.score.max', 100.0);\n\n    return {\n      error: false,\n    };\n  },\n  save: () => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    const resSave = res.API.LMSCommit();\n\n    if (resSave === service.STATUSES.update.false) {\n      return {\n        error: true,\n        message: 'SCORM service failed to save',\n        data: service.getError(),\n      };\n    }\n\n    return {\n      error: false,\n    };\n  },\n  stop: () => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    const saveRes = service.save();\n\n    if (saveRes.error) {\n      return saveRes;\n    }\n\n    const resFinish = res.API.LMSFinish();\n\n    if (resFinish === service.STATUSES.update.false) {\n      return {\n        error: true,\n        message: 'SCORM service failed to save',\n        data: service.getError(),\n      };\n    }\n\n    service.finished = true;\n    service.save();\n    console.log('terminating');\n    res.API.Commit();\n    return {\n      error: false,\n    };\n  },\n  setValue: (elem, val) => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    const setRes = res.API.LMSSetValue(elem, val);\n\n    if (setRes === service.STATUSES.update.false) {\n      return {\n        error: true,\n        message: `SCORM service failed to set ${elem} to ${val}`,\n        data: service.getError(true),\n      };\n    }\n\n    return {\n      error: false,\n    };\n  },\n  getValue: (elem) => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    const getRes = res.API.LMSGetValue(elem);\n\n    console.log('GET RES');\n    console.log(getRes);\n\n    if (getRes === service.STATUSES.update.false) {\n      return {\n        error: true,\n        message: `SCORM service failed to get ${elem}`,\n        data: service.getError(true),\n      };\n    }\n\n    return {\n      error: false,\n    };\n  },\n  updateStatus: (status) => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    if (!hasProp(service.STATUSES.lesson, status)) {\n      const validStatuses = Object.keys(service.STATUSES.lesson).join(', ');\n      const msg = `Invalid lesson status: ${status}. Must be one of: ${validStatuses}`;\n\n      console.error(msg);\n      return {\n        error: true,\n        message: msg,\n      };\n    }\n\n    const lessonStatus = service.STATUSES.lesson[status];\n    const setRes = service.setValue('cmi.core.lesson_status', lessonStatus);\n\n    if (setRes.error) {\n      return setRes;\n    }\n\n    return {\n      error: false,\n    };\n  },\n  exit: () => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    service._time.end = new Date();\n\n    if (!service._time.start) {\n      return {\n        error: true,\n        message: 'Service was never started',\n      };\n    }\n\n    const totalTime =\n      service._time.end.getTime() - service._time.start.getTime();\n    const endRes = service.setValue(\n      'cmi.core.session_time',\n      service._time.convert(totalTime)\n    );\n\n    if (endRes.error) {\n      return endRes;\n    }\n\n    const exitRes = service.setValue(\n      'cmi.core.exit',\n      service.STATUSES.exit.save\n    );\n\n    if (exitRes.error) {\n      return exitRes;\n    }\n\n    return service.stop();\n  },\n  finish: () => {\n    console.log('DONE');\n\n    service.setValue('cmi.core.score.raw', 87.0);\n    const scoreVal = service.getValue('cmi.core.score.raw');\n    const minScore = service.getValue('cmi.core.score.min');\n\n    if (scoreVal > minScore) {\n      service.updateStatus('success');\n    } else {\n      service.updateStatus('failed');\n    }\n\n    // service._time.end = new Date();\n    console.log('SERVICE:');\n    console.log(service);\n    service.save();\n    // const val = service.getValue('cmi.core.lesson_status');\n    service.save();\n    service.exit();\n    console.log(service);\n  },\n};\n\nexport default {\n  service,\n}\n"],"names":[],"version":3,"file":"scrowl.runtime.module.js.map"}